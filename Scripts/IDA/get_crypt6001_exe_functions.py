function_names = ["ntdll32.dll:ntdll_NtClose",
	"ntdll32.dll:ntdll_LdrLoadDll",
	"ntdll32.dll:ntdll_LdrGetProcedureAddress",
	"ntdll32.dll:ntdll_NtAllocateVirtualMemory",
	"ntdll32.dll:ntdll_NtFreeVirtualMemory",
	"ntdll32.dll:ntdll_NtProtectVirtualMemory",
	"ntdll32.dll:ntdll_NtQueryVirtualMemory",
	"ntdll32.dll:ntdll_NtWriteVirtualMemory",
	"ntdll32.dll:ntdll_NtReadVirtualMemory",
	"ntdll32.dll:ntdll_NtWow64ReadVirtualMemory64",
	"ntdll32.dll:ntdll_RtlFreeHeap",
	"ntdll32.dll:ntdll_memset",
	"ntdll32.dll:ntdll_memcpy",
	"ntdll32.dll:ntdll_memcmp",
	"ntdll32.dll:ntdll_memchr",
	"ntdll32.dll:ntdll_NtCreateEvent",
	"ntdll32.dll:ntdll_NtOpenEvent",
	"ntdll32.dll:ntdll_NtSetEvent",
	"ntdll32.dll:ntdll_NtWaitForSingleObject",
	"ntdll32.dll:ntdll_NtWaitForMultipleObjects",
	"ntdll32.dll:ntdll_NtQuerySystemInformation",
	"ntdll32.dll:ntdll_NtShutdownSystem",
	"ntdll32.dll:ntdll_RtlGetNtProductType",
	"ntdll32.dll:ntdll_NtOpenProcess",
	"ntdll32.dll:ntdll_NtTerminateProcess",
	"ntdll32.dll:ntdll_NtQueryInformationProcess",
	"ntdll32.dll:ntdll_NtDelayExecution",
	"ntdll32.dll:ntdll_RtlAdjustPrivilege",
	"ntdll32.dll:ntdll_RtlSetProcessIsCritical",
	"ntdll32.dll:ntdll_NtOpenThread",
	"ntdll32.dll:ntdll_NtTerminateThread",
	"ntdll32.dll:ntdll_NtResumeThread",
	"ntdll32.dll:ntdll_NtSuspendThread",
	"ntdll32.dll:ntdll_NtQueryInformationThread",
	"ntdll32.dll:ntdll_NtImpersonateThread",
	"ntdll32.dll:ntdll_RtlCreateUserThread",
	"ntdll32.dll:ntdll_NtCreateThreadEx",
	"ntdll32.dll:ntdll_CsrClientCallServer",
	"ntdll32.dll:ntdll_NtWow64CsrClientCallServer",
	"ntdll32.dll:ntdll_NtGetContextThread",
	"ntdll32.dll:ntdll_NtSetContextThread",
	"ntdll32.dll:ntdll_RtlExitUserThread",
	"ntdll32.dll:ntdll_NtQueueApcThread",
	"ntdll32.dll:ntdll_NtSetInformationThread",
	"ntdll32.dll:ntdll_NtOpenProcessToken",
	"ntdll32.dll:ntdll_NtQueryInformationToken",
	"ntdll32.dll:ntdll_NtCreateFile",
	"ntdll32.dll:ntdll_NtOpenFile",
	"ntdll32.dll:ntdll_NtWriteFile",
	"ntdll32.dll:ntdll_NtReadFile",
	"ntdll32.dll:ntdll_NtDeleteFile",
	"ntdll32.dll:ntdll_NtQueryInformationFile",
	"ntdll32.dll:ntdll_NtSetInformationFile",
	"ntdll32.dll:ntdll_NtQueryVolumeInformationFile",
	"ntdll32.dll:ntdll_NtCreateSection",
	"ntdll32.dll:ntdll_NtMapViewOfSection",
	"ntdll32.dll:ntdll_NtUnmapViewOfSection",
	"ntdll32.dll:ntdll_RtlCreateSecurityDescriptor",
	"ntdll32.dll:ntdll_RtlSetDaclSecurityDescriptor",
	"ntdll32.dll:ntdll_NtSetSecurityObject",
	"ntdll32.dll:ntdll_NtCreateKey",
	"ntdll32.dll:ntdll_NtOpenKey",
	"ntdll32.dll:ntdll_NtQueryKey",
	"ntdll32.dll:ntdll_NtDeleteKey",
	"ntdll32.dll:ntdll_NtQueryValueKey",
	"ntdll32.dll:ntdll_NtSetValueKey",
	"ntdll32.dll:ntdll_NtDeleteValueKey",
	"ntdll32.dll:ntdll_NtRenameKey",
	"ntdll32.dll:ntdll_NtEnumerateValueKey",
	"ntdll32.dll:ntdll_NtEnumerateKey",
	"ntdll32.dll:ntdll_NtFlushKey",
	"ntdll32.dll:ntdll_strcpy",
	"ntdll32.dll:ntdll_strncpy",
	"ntdll32.dll:ntdll_strcat",
	"ntdll32.dll:ntdll_strncat",
	"ntdll32.dll:ntdll_wcscpy",
	"ntdll32.dll:ntdll_wcsncpy",
	"ntdll32.dll:ntdll_wcscat",
	"ntdll32.dll:ntdll_wcsncat",
	"ntdll32.dll:ntdll_strcmp",
	"ntdll32.dll:ntdll_strncmp",
	"ntdll32.dll:ntdll_wcscmp",
	"ntdll32.dll:ntdll_wcsncmp",
	"ntdll32.dll:ntdll_sprintf",
	"ntdll32.dll:ntdll__swprintf",
	"ntdll32.dll:ntdll_sscanf",
	"ntdll32.dll:ntdll_RtlInitAnsiString",
	"ntdll32.dll:ntdll_RtlInitUnicodeString",
	"ntdll32.dll:ntdll_RtlAnsiStringToUnicodeString",
	"ntdll32.dll:ntdll_RtlUnicodeStringToAnsiString",
	"ntdll32.dll:ntdll_RtlFreeAnsiString",
	"ntdll32.dll:ntdll_RtlFreeAnsiString",
	"ntdll32.dll:ntdll_RtlDosPathNameToNtPathName_U",
	"ntdll32.dll:ntdll_RtlConvertSidToUnicodeString",
	"ntdll32.dll:ntdll_RtlQueryEnvironmentVariable_U",
	"ntdll32.dll:ntdll_RtlCompressBuffer",
	"ntdll32.dll:ntdll_RtlDecompressBuffer",
	"ntdll32.dll:ntdll_RtlGetCompressionWorkSpaceSize",
	"ntdll32.dll:ntdll_RtlAddVectoredExceptionHandler",
	"ntdll32.dll:ntdll_RtlRemoveVectoredExceptionHandler",
	"ntdll32.dll:ntdll_RtlInitializeCriticalSection",
	"ntdll32.dll:ntdll_RtlDeleteCriticalSection",
	"ntdll32.dll:ntdll_RtlEnterCriticalSection",
	"ntdll32.dll:ntdll_RtlLeaveCriticalSection",
	"ntdll32.dll:ntdll_NtQuerySystemTime",
	"ntdll32.dll:ntdll_RtlTimeToSecondsSince1970",
	"ntdll32.dll:ntdll_NtQueryIntervalProfile",
	"ntdll32.dll:ntdll_RtlRandomEx",
	"kernel32.dll:kernel32_GetTickCount",
	"kernel32.dll:kernel32_CreateProcessInternalW",
	"kernel32.dll:kernel32_OutputDebugStringA",
	"kernel32.dll:kernel32_WinExec",
	"kernel32.dll:kernel32_CreateFileW",
	"kernel32.dll:kernel32_ReadFile",
	"kernel32.dll:kernel32_WriteFile",
	"kernel32.dll:kernel32_FlushFileBuffers",
	"kernel32.dll:kernel32_GetFileSize",
	"kernel32.dll:kernel32_SetFilePointer",
	"kernel32.dll:kernel32_GetFileSizeEx",
	"kernel32.dll:kernel32_SetFilePointerEx",
	"kernel32.dll:kernel32_GetFileAttributesW",
	"kernel32.dll:kernel32_SetFileAttributesW",
	"kernel32.dll:kernel32_SetEndOfFile",
	"kernel32.dll:kernel32_GetFileTime",
	"kernel32.dll:kernel32_SetFileTime",
	"kernel32.dll:kernel32_GetLogicalDriveStringsW",
	"kernel32.dll:kernel32_GetVolumeInformationW",
	"kernel32.dll:kernel32_GetDriveTypeW",
	"kernel32.dll:kernel32_CloseHandle",
	"kernel32.dll:kernel32_FindFirstFileW",
	"kernel32.dll:kernel32_FindNextFileW",
	"kernel32.dll:kernel32_FindClose",
	"kernel32.dll:kernel32_SetErrorMode",
	"kernel32.dll:kernel32_LocalFree",
	"kernel32.dll:kernel32_SetPriorityClass",
	"kernel32.dll:kernel32_MoveFileExW",
	"kernel32.dll:kernel32_CreateThread",
	"kernel32.dll:kernel32_CreateRemoteThread",
	"kernel32.dll:kernel32_GetCommandLineW",
	"advapi32.dll:advapi32_AllocateAndInitializeSid",
	"advapi32.dll:advapi32_CheckTokenMembership",
	"advapi32.dll:advapi32_FreeSid",
	"advapi32.dll:advapi32_LookupAccountSidW",
	"advapi32.dll:advapi32_GetUserNameW",
	"advapi32.dll:advapi32_OpenSCManagerW",
	"advapi32.dll:advapi32_OpenServiceW",
	"advapi32.dll:advapi32_QueryServiceStatus",
	"advapi32.dll:advapi32_ControlService",
	"advapi32.dll:advapi32_ChangeServiceConfigW",
	"advapi32.dll:advapi32_CloseServiceHandle",
	"advapi32.dll:advapi32_CryptAcquireContextW",
	"advapi32.dll:advapi32_CryptReleaseContext",
	"advapi32.dll:advapi32_CryptGenKey",
	"advapi32.dll:advapi32_CryptDestroyKey",
	"advapi32.dll:advapi32_CryptExportKey",
	"advapi32.dll:advapi32_CryptImportKey",
	"advapi32.dll:advapi32_CryptEncrypt",
	"advapi32.dll:advapi32_CryptDecrypt",
	"advapi32.dll:advapi32_CryptDuplicateKey",
	"advapi32.dll:advapi32_CryptCreateHash",
	"advapi32.dll:advapi32_CryptHashData",
	"advapi32.dll:advapi32_CryptGetHashParam",
	"advapi32.dll:advapi32_CryptDestroyHash",
	"advapi32.dll:advapi32_CryptSetKeyParam",
	"advapi32.dll:advapi32_CryptGetKeyParam",
	"user32.dll:user32_GetKeyboardLayoutList",
	"user32.dll:user32_GetSystemMetrics",
	"wininet.dll:wininet_InternetOpenA",
	"wininet.dll:wininet_InternetOpenW",
	"wininet.dll:wininet_InternetConnectA",
	"wininet.dll:wininet_InternetConnectW",
	"wininet.dll:wininet_InternetOpenUrlA",
	"wininet.dll:wininet_InternetOpenUrlW",
	"wininet.dll:wininet_HttpOpenRequestA",
	"wininet.dll:wininet_HttpOpenRequestW",
	"wininet.dll:wininet_HttpSendRequestA",
	"wininet.dll:wininet_HttpSendRequestW",
	"wininet.dll:wininet_InternetReadFile",
	"wininet.dll:wininet_InternetCloseHandle",
	"wininet.dll:wininet_HttpAddRequestHeadersA",
	"wininet.dll:wininet_HttpSendRequestExA",
	"wininet.dll:wininet_HttpEndRequestA",
	"wininet.dll:wininet_InternetWriteFile",
	"wininet.dll:wininet_InternetSetOptionA",
	"wininet.dll:wininet_InternetSetOptionW",
	"urlmon.dll:urlmon_ObtainUserAgentString",
	"ole32.dll:ole32_CoInitializeEx",
	"ole32.dll:ole32_CoUninitialize",
	"ole32.dll:ole32_CoCreateInstance",
	"ole32.dll:ole32_CreateStreamOnHGlobal",
	"crypt32.dll:crypt32_CryptDecodeObjectEx",
	"crypt32.dll:crypt32_CryptStringToBinaryA",
	"crypt32.dll:crypt32_CryptStringToBinaryW",
	"crypt32.dll:crypt32_CryptImportPublicKeyInfo"]

def get_array_index(hexadecimal_index):
	return (int(hexadecimal_index, 16) / 4)

def get_function(addr):

	hexadecimal_index = GetOpnd(addr,1)
	if("+" in hexadecimal_index):
		hexadecimal_index = hexadecimal_index.split("+")[1]
		if("h" in hexadecimal_index):
			hexadecimal_index = hexadecimal_index.split("h")[0]
		else:
			hexadecimal_index = hexadecimal_index[:-1]
	else:
		hexadecimal_index = "0"
	index = get_array_index(hexadecimal_index)
	return function_names[index]


heads = Heads(SegStart(ScreenEA()), SegEnd(ScreenEA()))
previous_address = 0

print("Adding function name as a comment...")

for current_address in heads:
	if ((GetMnem(previous_address) == "mov" and "eax" in GetOpnd(previous_address,1)) and (GetMnem(current_address) == "call" and GetOpnd(current_address,0) == GetOpnd(previous_address,0))):
		MakeComm(current_address, get_function(previous_address))
	previous_address = current_address

print("Functions added!")

